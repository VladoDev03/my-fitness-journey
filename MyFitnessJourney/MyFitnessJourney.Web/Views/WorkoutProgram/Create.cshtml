@using MyFitnessJourney.Web.Models.WorkoutProgram
@model WorkoutProgramViewModel

@{
    ViewData["Title"] = "Create Training Program";
    string exercisesJson = System.Text.Json.JsonSerializer.Serialize(Model.Exercises.Select(x => new { id = x.Id, name = x.CapitalizedName }).ToList());
}

<h2>@ViewData["Title"]</h2>

<div id="exercisesData" data-exercises='@exercisesJson'></div>

<form asp-action="Create" method="post" id="trainingForm">
    <div id="daysContainer">
        <div class="day-block" data-day-index="0" style="border:1px solid #ccc; padding:10px; margin-bottom:15px;">
            <h3>Day 1</h3>
            <input type="hidden" name="Program.Days[0].DayName" value="Day 1" />

            <div class="exercisesContainer">
                <div class="exercise-row" style="margin-bottom:10px;">
                    <select class="exerciseSelect" name="Program.Days[0].Exercises[0].Name" required>
                        <option value="">-- Select Exercise --</option>
                        @foreach (var exercise in Model.Exercises)
                        {
                            <option value="@exercise.CapitalizedName" data-id="@exercise.Id">@exercise.CapitalizedName</option>
                        }
                    </select>

                    <input type="hidden" name="Program.Days[0].Exercises[0].ExerciseId" value="" class="exerciseIdInput" />

                    <input type="number" name="Program.Days[0].Exercises[0].Sets" min="1" placeholder="Sets" required style="width:70px; margin-left:5px;" />
                    <input type="number" name="Program.Days[0].Exercises[0].RepsMin" min="1" placeholder="Min Reps" required style="width:70px; margin-left:5px;" />
                    <input type="number" name="Program.Days[0].Exercises[0].RepsMax" min="1" placeholder="Max Reps" required style="width:70px; margin-left:5px;" />

                    <button type="button" class="removeExerciseBtn" style="margin-left: 10px; color: red;">Remove Exercise</button>
                </div>
            </div>

            <button type="button" class="addExerciseBtn" style="margin-top:5px;">Add Exercise</button>
            <button type="button" class="removeDayBtn" style="margin-left: 10px; color: red;">Remove Day</button>
        </div>
    </div>

    <button type="button" id="addDayBtn" style="margin-top:10px;">Add Day</button>

    <br /><br />
    <button type="submit">Save Program</button>
</form>

@section Scripts {
    <script>
        (function () {
            const maxDays = 7;
            let dayIndex = 1;

            const exercisesDataDiv = document.getElementById('exercisesData');
            const exercises = JSON.parse(exercisesDataDiv.dataset.exercises);

            const daysContainer = document.getElementById('daysContainer');
            const addDayBtn = document.getElementById('addDayBtn');

            function updateExerciseIds() {
                const selects = document.querySelectorAll('.exerciseSelect');
                selects.forEach(select => {
                    const selectedOption = select.options[select.selectedIndex];
                    const exerciseIdInput = select.closest('.exercise-row').querySelector('.exerciseIdInput');
                    exerciseIdInput.value = selectedOption?.dataset.id || '';
                });
            }

            function addExercise(dayBlock, dayIdx) {
                const exercisesContainer = dayBlock.querySelector('.exercisesContainer');
                const exerciseCount = exercisesContainer.querySelectorAll('.exercise-row').length;

                const div = document.createElement('div');
                div.classList.add('exercise-row');
                div.style.marginBottom = '10px';

                const select = document.createElement('select');
                select.classList.add('exerciseSelect');
                select.name = `Program.Days[${dayIdx}].Exercises[${exerciseCount}].Name`;
                select.required = true;

                const defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.text = "-- Select Exercise --";
                select.appendChild(defaultOption);

                exercises.forEach(ex => {
                    const option = document.createElement('option');
                    option.value = ex.name;
                    option.text = ex.name;
                    option.dataset.id = ex.id;
                    select.appendChild(option);
                });

                const exerciseIdInput = document.createElement('input');
                exerciseIdInput.type = 'hidden';
                exerciseIdInput.name = `Program.Days[${dayIdx}].Exercises[${exerciseCount}].ExerciseId`;
                exerciseIdInput.classList.add('exerciseIdInput');
                exerciseIdInput.value = "";

                const setsInput = document.createElement('input');
                setsInput.type = 'number';
                setsInput.name = `Program.Days[${dayIdx}].Exercises[${exerciseCount}].Sets`;
                setsInput.min = 1;
                setsInput.placeholder = 'Sets';
                setsInput.required = true;
                setsInput.style.width = '70px';
                setsInput.style.marginLeft = '5px';

                const repsMinInput = document.createElement('input');
                repsMinInput.type = 'number';
                repsMinInput.name = `Program.Days[${dayIdx}].Exercises[${exerciseCount}].RepsMin`;
                repsMinInput.min = 1;
                repsMinInput.placeholder = 'Min Reps';
                repsMinInput.required = true;
                repsMinInput.style.width = '70px';
                repsMinInput.style.marginLeft = '5px';

                const repsMaxInput = document.createElement('input');
                repsMaxInput.type = 'number';
                repsMaxInput.name = `Program.Days[${dayIdx}].Exercises[${exerciseCount}].RepsMax`;
                repsMaxInput.min = 1;
                repsMaxInput.placeholder = 'Max Reps';
                repsMaxInput.required = true;
                repsMaxInput.style.width = '70px';
                repsMaxInput.style.marginLeft = '5px';

                const removeExerciseBtn = document.createElement('button');
                removeExerciseBtn.type = 'button';
                removeExerciseBtn.classList.add('removeExerciseBtn');
                removeExerciseBtn.style.marginLeft = '10px';
                removeExerciseBtn.style.color = 'red';
                removeExerciseBtn.textContent = 'Remove Exercise';
                removeExerciseBtn.addEventListener('click', () => div.remove());

                select.addEventListener('change', updateExerciseIds);

                div.appendChild(select);
                div.appendChild(exerciseIdInput);
                div.appendChild(setsInput);
                div.appendChild(repsMinInput);
                div.appendChild(repsMaxInput);
                div.appendChild(removeExerciseBtn);

                exercisesContainer.appendChild(div);
            }

            function addDay() {
                if (dayIndex >= maxDays) return;

                const div = document.createElement('div');
                div.classList.add('day-block');
                div.dataset.dayIndex = dayIndex;
                div.style.border = '1px solid #ccc';
                div.style.padding = '10px';
                div.style.marginBottom = '15px';

                const dayTitle = document.createElement('h3');
                dayTitle.textContent = `Day ${dayIndex + 1}`;

                const hiddenDayName = document.createElement('input');
                hiddenDayName.type = 'hidden';
                hiddenDayName.name = `Program.Days[${dayIndex}].DayName`;
                hiddenDayName.value = `Day ${dayIndex + 1}`;

                const exercisesContainer = document.createElement('div');
                exercisesContainer.classList.add('exercisesContainer');

                div.appendChild(dayTitle);
                div.appendChild(hiddenDayName);
                div.appendChild(exercisesContainer);

                const addExerciseBtn = document.createElement('button');
                addExerciseBtn.type = 'button';
                addExerciseBtn.classList.add('addExerciseBtn');
                addExerciseBtn.style.marginTop = '5px';
                addExerciseBtn.textContent = 'Add Exercise';

                const removeDayBtn = document.createElement('button');
                removeDayBtn.type = 'button';
                removeDayBtn.classList.add('removeDayBtn');
                removeDayBtn.style.marginLeft = '10px';
                removeDayBtn.style.color = 'red';
                removeDayBtn.textContent = 'Remove Day';

                addExerciseBtn.addEventListener('click', () => addExercise(div, dayIndex));
                removeDayBtn.addEventListener('click', () => div.remove());

                div.appendChild(addExerciseBtn);
                div.appendChild(removeDayBtn);

                daysContainer.appendChild(div);

                addExercise(div, dayIndex);
                dayIndex++;
            }

            // Init event listeners for default Day 1
            document.querySelectorAll('.addExerciseBtn').forEach((btn) => {
                btn.addEventListener('click', () => {
                    const dayBlock = btn.closest('.day-block');
                    addExercise(dayBlock, parseInt(dayBlock.dataset.dayIndex));
                });
            });

            document.querySelectorAll('.removeExerciseBtn').forEach(btn => {
                btn.addEventListener('click', () => {
                    btn.closest('.exercise-row').remove();
                });
            });

            document.querySelectorAll('.exerciseSelect').forEach(select => {
                select.addEventListener('change', updateExerciseIds);
            });

            addDayBtn.addEventListener('click', addDay);

            updateExerciseIds();
        })();
    </script>
}
